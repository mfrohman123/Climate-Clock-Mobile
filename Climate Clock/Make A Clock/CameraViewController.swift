//
//  CameraViewController.swift
//  Climate Clock
//
//  Created by Matt Frohman on 11/14/20.
//  Copyright Â© 2020 Matthew Frohman. All rights reserved.
//
//  This class handles the View Controller for user-captured photos for sharing their Climate Clock.

import UIKit
import Photos

class CameraViewController: UIViewController {
    
    @IBOutlet fileprivate var captureButton: UIButton!
    
    ///Displays a preview of the video output generated by the device's cameras.
    @IBOutlet fileprivate var capturePreviewView: UIView!
    
    ///Allows the user to enable flash.
    @IBOutlet var toggleFlashButton: UIButton!
    
    let cameraController = CameraController()
    
    var preview : UIImageView!
    var image : UIImage!
    
    override var prefersStatusBarHidden: Bool { return false }
    
}

/**
 Extension for configuring and styling the photo capture button.
 */
extension CameraViewController {
    override func viewDidLoad() {
        self.view.backgroundColor = .black
        
        let left = UIBarButtonItem(image: UIImage(named: "back"), style: .plain, target: self, action: #selector(goBack))
        let home = UIBarButtonItem(image: UIImage(named: "home"), style: .plain, target: self, action: #selector(goHome))
        
        self.navigationItem.leftBarButtonItem = left
        self.navigationItem.rightBarButtonItem = home
        
        func configureCameraController() {
            cameraController.prepare {(error) in
                if let error = error {
                    print(error)
                }
                
                try? self.cameraController.displayPreview(on: self.capturePreviewView)
            }
        }
        
        func styleCaptureButton() {
            captureButton.layer.borderColor = UIColor.black.cgColor
            captureButton.layer.borderWidth = 2
            
            captureButton.layer.cornerRadius = min(captureButton.frame.width, captureButton.frame.height) / 2
        }
        
        //set up camera
        captureButton.layer.borderColor = UIColor.lightGray.cgColor
        captureButton.layer.borderWidth = 2
        captureButton.layer.cornerRadius = min(captureButton.frame.width, captureButton.frame.height) / 2
        captureButton.alpha = 0 //wait until sceneview loads first
        
        captureButton.layer.masksToBounds = false
        captureButton.layer.shadowColor = UIColor.black.cgColor
        captureButton.layer.shadowOpacity = 0.8
        captureButton.layer.shadowOffset = CGSize(width: 0, height: 2)
        captureButton.layer.shadowRadius = 4
        
        let pinch = UIPinchGestureRecognizer(target: cameraController, action: #selector(cameraController.pinch))
        let focus = UITapGestureRecognizer(target: cameraController, action: #selector(cameraController.tapToFocus))
        
        self.view.addGestureRecognizer(pinch)
        self.view.addGestureRecognizer(focus)
        
        styleCaptureButton()
        configureCameraController()
        
        UIView.animate(withDuration: 0.75) {
            self.captureButton.alpha = 1.0
        }
    }
    
    /**
     Returns the current View Controller to the first instructional page.
     */
    @objc func goBack() {
        // Remove saved states
        UserDefaults.standard.set(7, forKey: "page")
        
        navigationController?.popViewController(animated: true)
    }
    
    /**
    Used for popping the View Controller to the home screen.
     */
    @objc func goHome() {
        navigationController?.popToRootViewController(animated: true)
    }
    
    /**
     User wants to retake a photo.
     */
    @objc func retake() {
        let alert = UIAlertController(title: "Retake?", message: "Do you want to retake the photo?", preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "Yes", style: .destructive, handler: { action in
            self.preview.removeFromSuperview()

            let left = UIBarButtonItem(image: UIImage(named: "back"), style: .plain, target: self, action: #selector(self.goBack))
            let home = UIBarButtonItem(image: UIImage(named: "home"), style: .plain, target: self, action: #selector(self.goHome))
            self.navigationItem.setLeftBarButton(left, animated: true)
            self.navigationItem.setRightBarButton(home, animated: true)
        }))
        alert.addAction(UIAlertAction(title: "No", style: .cancel, handler: nil))
        self.present(alert, animated: true, completion: nil)
    }
    
    /**
     User wants to share the taken photo.
     */
    @objc func share() {
        let sharedImages = [image]

        let activityViewController = UIActivityViewController(activityItems: sharedImages, applicationActivities: nil)
        activityViewController.popoverPresentationController?.sourceView = self.view // so that iPads won't crash

        // present the view controller
        self.present(activityViewController, animated: true, completion: nil)
    }
}

/**
 An extension for adding flash/capturing photos.
 */
extension CameraViewController {
    @IBAction func toggleFlash(_ sender: UIButton) {
        if cameraController.flashMode == .on {
            cameraController.flashMode = .off
            toggleFlashButton.setImage(UIImage(named: "FlashOff"), for: .normal)
        }
            
        else {
            cameraController.flashMode = .on
            toggleFlashButton.setImage(UIImage(named: "FlashOn"), for: .normal)
        }
    }
    
    /**
     The method that handles capturing an image.
     */
    @IBAction func captureImage(_ sender: UIButton) {
        cameraController.captureImage {(image, error) in
            guard let image = image else {
                print(error ?? "Image capture error")
                return
            }
            
            self.image = image
            
            self.updateNavBar()
            
            self.preview = UIImageView(image: image)
            
            self.preview.translatesAutoresizingMaskIntoConstraints = false
            self.view.addSubview(self.preview)
            self.preview.topAnchor.constraint(equalTo: self.view.topAnchor).isActive = true
            self.preview.bottomAnchor.constraint(equalTo: self.view.bottomAnchor).isActive = true
            self.preview.leftAnchor.constraint(equalTo: self.view.leftAnchor).isActive = true
            self.preview.rightAnchor.constraint(equalTo: self.view.rightAnchor).isActive = true
        }
    }
    
    // Replace navigation buttons with cancel/share buttons
    func updateNavBar() {
        let left = UIBarButtonItem(title: "Retake", style: .plain, target: self, action: #selector(retake))
        let send = UIBarButtonItem(image: UIImage(named: "share"), style: .plain, target: self, action: #selector(share))
        
        self.navigationItem.setLeftBarButton(left, animated: true)
        self.navigationItem.setRightBarButton(send, animated: true)
    }
    
}

extension URL {

    var uti: String {
        return (try? self.resourceValues(forKeys: [.typeIdentifierKey]))?.typeIdentifier ?? "public.data"
    }

}
